#!/bin/bash

# =============================================================================
# NETWORK ALIASES GENERATOR
# =============================================================================
# Functions for generating Docker Compose network aliases for .localhost projects
# Usage: source this file and call alias generation functions
# =============================================================================

set -euo pipefail

# Load base functionality
BASE_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/../core" && pwd)"

source "$BASE_DIR/base.sh"

# Load dependencies
ALIASES_SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$ALIASES_SCRIPT_DIR/../core/utils.sh"
source "$ALIASES_SCRIPT_DIR/../core/config.sh"
source "$ALIASES_SCRIPT_DIR/../core/validation.sh"
source "$ALIASES_SCRIPT_DIR/projects.sh"

# Configuration
readonly ALIASES_FILE="docker-compose.aliases.yml"

generate_yaml_header() {
    local description="${1:-Generated by DockerKit tools/lib/services/aliases.sh}"
    local additional_info="${2:-}"

    cat << EOF
---
# =============================================================================
# AUTO-GENERATED NETWORK ALIASES
# =============================================================================
# $description
# Do not edit manually - this file will be overwritten
#
# This file provides network aliases for .localhost projects, allowing containers
# to resolve project domains internally (e.g., nginx can route to workspace)
# =============================================================================
${additional_info:+#
# $additional_info
# =============================================================================}

EOF
}

create_aliases_file_header() {
    generate_yaml_header > "$ALIASES_FILE"
    echo "services:" >> "$ALIASES_FILE"
}

add_nginx_aliases() {
    local projects=("$@")

    cat >> "$ALIASES_FILE" << 'EOF'
  nginx:
    networks:
      web:
        aliases:
EOF

    for project in "${projects[@]}"; do
        echo "          - $project" >> "$ALIASES_FILE"
    done

    cat >> "$ALIASES_FILE" << 'EOF'
      backend:
        aliases:
EOF

    for project in "${projects[@]}"; do
        echo "          - $project" >> "$ALIASES_FILE"
    done
}

create_empty_aliases_file() {
    generate_yaml_header "Generated by DockerKit tools/lib/services/aliases.sh" "No .localhost projects found - empty configuration" > "$ALIASES_FILE"
    echo "services: {}" >> "$ALIASES_FILE"

    print_info "Created empty aliases file (no projects found)"
}

validate_aliases_file() {
    if [ ! -f "$ALIASES_FILE" ]; then
        print_error "Aliases file not found: $ALIASES_FILE"
        return "$EXIT_INVALID_CONFIG"
    fi

    if [ ! -r "$ALIASES_FILE" ]; then
        print_error "Aliases file not readable: $ALIASES_FILE"
        return "$EXIT_PERMISSION_DENIED"
    fi

    # Basic YAML syntax validation
    if ! docker compose version >/dev/null 2>&1; then
        print_warning "docker compose not available for validation"
        return "$EXIT_SUCCESS"
    fi

    # Test if docker compose can parse the file together with main compose file
    if ! docker compose -f docker-compose.yml -f "$ALIASES_FILE" config >/dev/null 2>&1; then
        print_error "Invalid YAML syntax in aliases file or incompatible with docker-compose.yml"
        return "$EXIT_INVALID_CONFIG"
    fi

    return "$EXIT_SUCCESS"
}

generate_aliases_from_scan() {
    local projects

    print_info "Scanning for .localhost projects..."

    if ! projects=$(scan_local_projects 2>/dev/null); then
        print_warning "No .localhost projects found"
        create_empty_aliases_file
        return "$EXIT_SUCCESS"
    fi

    # Convert to array
    local projects_array=()
    while IFS= read -r project; do
        projects_array+=("$project")
    done <<< "$projects"

    generate_network_aliases "${projects_array[@]}"
}

setup_network_aliases() {
    local projects=("$@")

    if [ ${#projects[@]} -eq 0 ]; then
        print_info "No projects provided, scanning automatically..."
        generate_aliases_from_scan
    else
        generate_network_aliases "${projects[@]}"
    fi

    # Validate generated file
    if ! validate_aliases_file; then
        print_error "Failed to validate generated aliases file"
        return "$EXIT_INVALID_CONFIG"
    fi

    return "$EXIT_SUCCESS"
}

generate_network_aliases() {
    local projects=("$@")

    if [ ${#projects[@]} -eq 0 ]; then
        print_warning "No projects provided for alias generation"
        create_empty_aliases_file
        return "$EXIT_SUCCESS"
    fi

    # Create aliases file header
    create_aliases_file_header

    # Add nginx aliases (both web and backend networks)
    add_nginx_aliases "${projects[@]}"

    # Show status for each site individually
    for project in "${projects[@]}"; do
        print_success "Network alias added for $project"
    done

    # Show final status
    print_success "Network aliases file generated: $ALIASES_FILE"

    return "$EXIT_SUCCESS"
}
