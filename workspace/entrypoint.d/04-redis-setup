#!/bin/bash

# ============================================================================
# REDIS ACL SETUP SCRIPT
# ============================================================================
# Scans .local projects and configures Redis ACL for discovered passwords
# ============================================================================
set -euo pipefail

# Source common functions
# shellcheck source=workspace/entrypoint.d/00-base
source /entrypoint.d/00-base

# Redis configuration
readonly REDIS_HOST="redis"

# Arrays to store discovered configurations
declare -a discovered_redis_configs=()

# ============================================================================
# PREREQUISITES CHECK
# ============================================================================

check_prerequisites() {
    log_info "Checking prerequisites for Redis ACL setup..."

    if ! command_exists redis-cli; then
        log_skip "Redis client (redis-cli) not installed"
        return 1
    fi

    local redis_version
    redis_version=$(redis-cli --version 2>/dev/null | head -1 | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+' || echo "unknown")
    log_ok "Redis client (redis-cli) available: version $redis_version"

    log_ok "Prerequisites check completed"
    return 0
}

# ============================================================================
# REDIS SERVER CONNECTION
# ============================================================================

test_redis_connection() {
    retry_connection "redis-cli -h '$REDIS_HOST' ping" "Redis server ($REDIS_HOST)"
}

# ============================================================================
# ENVIRONMENT FILE PARSING
# ============================================================================

# Parse environment files in project directory for Redis configuration
parse_env_files() {
    local project_path="$1"
    local project_name
    project_name=$(basename "$project_path")

    # Clear previous discoveries for this project
    discovered_redis_configs=()

    for env_file in "${ENV_FILES[@]}"; do
        local full_path="$project_path/$env_file"

        if [[ ! -f "$full_path" ]]; then
            continue
        fi

        # Look for REDIS_PASSWORD using updated parsing
        local redis_password
        if redis_password=$(grep "^REDIS_PASSWORD=" "$full_path" | head -1 | cut -d'=' -f2-); then
            # Remove leading/trailing whitespace
            redis_password=$(echo "$redis_password" | sed 's/^[[:space:]]*//' | sed 's/[[:space:]]*$//')

            # Remove quotes if present
            if [[ "$redis_password" =~ ^\".*\"$ ]] || [[ "$redis_password" =~ ^\'.*\'$ ]]; then
                redis_password="${redis_password:1:-1}"
            fi

            if [[ -n "$redis_password" ]]; then
                discovered_redis_configs+=("$redis_password:$env_file")
                log_info "Found Redis password in $env_file"
            fi
        fi
    done
}

# ============================================================================
# REDIS ACL CONFIGURATION
# ============================================================================

# Configure Redis ACL for a specific password
configure_redis_password() {
    local password="$1"
    local env_file="$2"
    local project_name="$3"

    local masked_password
    masked_password=$(mask_password "$password")
    local context="project: $project_name, file: $env_file"

    log_info "Configuring Redis ACL for password '$masked_password' ($context)"

    # Build ACL command
    local -a acl_command_parts=("ACL" "SETUSER" "default" "on" ">$password" "~*" "+@all")

    # Execute ACL command
    if redis-cli -h "$REDIS_HOST" "${acl_command_parts[@]}" >/dev/null 2>&1; then
        log_ok "Redis ACL configured for password '$masked_password' ($context)"
        return 0
    else
        log_error "Failed to configure Redis ACL for password '$masked_password' ($context)"
        # Try to get more info on failure
        redis-cli -h "$REDIS_HOST" "${acl_command_parts[@]}" 2>&1 | head -3 || true
        return 1
    fi
}

# ============================================================================
# PROJECT PROCESSING
# ============================================================================

# Callback function for Redis-specific project processing
process_redis_project() {
    local project_name="$1"
    local project_path="$2"

    # Parse environment files for Redis configuration
    parse_env_files "$project_path"

    if [[ ${#discovered_redis_configs[@]} -eq 0 ]]; then
        log_info "No Redis password configuration found for $project_name"
        return 0
    fi

    # Process each Redis configuration found for this project
    for config in "${discovered_redis_configs[@]}"; do
        IFS=':' read -r password env_file <<< "$config"
        configure_redis_password "$password" "$env_file" "$project_name" || true
    done

    return 0
}

# ============================================================================
# MAIN EXECUTION
# ============================================================================

main() {
    log_info "Setting up Redis ACLs for workspace container..."

    # Check prerequisites
    if ! check_prerequisites; then
        log_info "Redis ACL setup completed (skipped due to failed prerequisites)"
        echo ""
        return 0
    fi

    # Test Redis server connection
    if ! test_redis_connection; then
        log_info "Redis ACL setup completed (server not accessible)"
        echo ""
        return 0
    fi

    # Process .local projects for Redis configurations
    run_project_automation "Redis ACL" "process_redis_project"
    return 0
}

# Execute main function
main "$@"
