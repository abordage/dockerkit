#!/bin/bash

# ============================================================================
# REDIS ACL SETUP SCRIPT
# ============================================================================
# Configures multiple passwords for the default Redis user
# ============================================================================
set -euo pipefail

# Color output functions
log_ok() { echo -e "[$SCRIPT_NAME] \033[32m[OK]\033[0m $*"; }
log_warn() { echo -e "[$SCRIPT_NAME] \033[93m[WARN]\033[0m $*"; }
log_error() { echo -e "[$SCRIPT_NAME] \033[31m[ERROR]\033[0m $*"; }
log_info() { echo "[$SCRIPT_NAME] $*"; }
log_skip() { echo -e "[$SCRIPT_NAME] \033[36m[SKIP]\033[0m $*"; }

SCRIPT_NAME=$(basename "$0")
readonly SCRIPT_NAME

# Redis configuration
readonly REDIS_HOST="redis"
readonly LEGACY_PASSWORDS=("secret" "redis_secret" "redis" "default")

# ============================================================================
# PREREQUISITES CHECK
# ============================================================================

check_prerequisites() {
    log_info "Checking prerequisites for Redis ACL setup..."

    if ! command -v redis-cli >/dev/null 2>&1; then
        log_skip "Redis client (redis-cli) not installed"
        return 1
    fi
    log_ok "Redis client (redis-cli) is available"

    if [[ -z "${REDIS_PASSWORD:-}" ]]; then
        log_warn "Primary REDIS_PASSWORD not set, setup might be incomplete"
    else
        log_ok "Primary REDIS_PASSWORD is set"
    fi

    log_ok "Prerequisites check completed"
    return 0
}

# ============================================================================
# REDIS SERVER CONNECTION
# ============================================================================

test_redis_connection() {
    log_info "Testing connection to Redis server ($REDIS_HOST)..."
    local max_attempts=5
    local attempt=1

    while [[ $attempt -le $max_attempts ]]; do
        if redis-cli -h "$REDIS_HOST" -a "${REDIS_PASSWORD:-}" ping >/dev/null 2>&1; then
            log_ok "Redis server is accessible"
            return 0
        fi

        if [[ $attempt -lt $max_attempts ]]; then
            log_info "Attempt $attempt/$max_attempts failed, retrying in 2 seconds..."
            sleep 2
        fi
        ((attempt++))
    done

    log_warn "Redis server is not accessible at $REDIS_HOST"
    log_warn "Redis ACL setup will be skipped"
    return 1
}

# ============================================================================
# ACL CONFIGURATION
# ============================================================================

configure_acl() {
    log_info "Configuring multiple passwords for default Redis user..."
    log_info "We do this to allow developers to connect without changing local configs."

    local -a acl_command_parts=("ACL" "SETUSER" "default" "on")

    # Add primary password from .env if it exists
    if [[ -n "${REDIS_PASSWORD:-}" ]]; then
        acl_command_parts+=(">${REDIS_PASSWORD}")
        log_info "Added primary password from REDIS_PASSWORD env variable"
    fi

    # Add legacy passwords
    for pass in "${LEGACY_PASSWORDS[@]}"; do
        acl_command_parts+=(">$pass")
    done
    log_info "Added legacy passwords: ${LEGACY_PASSWORDS[*]}"

    # Add full permissions
    acl_command_parts+=("~*" "+@all")

    log_info "Executing ACL command..."
    if redis-cli -h "$REDIS_HOST" -a "${REDIS_PASSWORD:-}" "${acl_command_parts[@]}" >/dev/null 2>&1; then
        log_ok "Redis ACLs for default user updated successfully"
    else
        log_error "Failed to update Redis ACLs"
        # Try to get more info on failure
        redis-cli -h "$REDIS_HOST" -a "${REDIS_PASSWORD:-}" "${acl_command_parts[@]}" || true
        return 1
    fi

    return 0
}

# ============================================================================
# MAIN EXECUTION
# ============================================================================

main() {
    log_info "Setting up Redis ACLs..."

    if ! check_prerequisites; then
        log_info "Redis ACL setup completed (skipped due to failed prerequisites)"
        echo ""
        return 0
    fi

    if ! test_redis_connection; then
        log_info "Redis ACL setup completed (server not accessible)"
        echo ""
        return 0
    fi

    if ! configure_acl; then
        log_error "Redis ACL configuration failed"
        echo ""
        return 1
    fi

    log_info "Redis ACL setup completed"
    echo ""
    return 0
}

# Execute main function
main "$@"
