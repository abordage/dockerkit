#!/bin/bash

#   $$$$$$$\                      $$\                           $$\   $$\ $$\   $$\
#   $$  __$$\                     $$ |                          $$ | $$  |\__|  $$ |
#   $$ |  $$ | $$$$$$\   $$$$$$$\ $$ |  $$\  $$$$$$\   $$$$$$\  $$ |$$  / $$\ $$$$$$\
#   $$ |  $$ |$$  __$$\ $$  _____|$$ | $$  |$$  __$$\ $$  __$$\ $$$$$  /  $$ |\_$$  _|
#   $$ |  $$ |$$ /  $$ |$$ /      $$$$$$  / $$$$$$$$ |$$ |  \__|$$  $$<   $$ |  $$ |
#   $$ |  $$ |$$ |  $$ |$$ |      $$  _$$<  $$   ____|$$ |      $$ |\$$\  $$ |  $$ |$$\
#   $$$$$$$  |\$$$$$$  |\$$$$$$$\ $$ | \$$\ \$$$$$$$\ $$ |      $$ | \$$\ $$ |  \$$$$  |
#   \_______/  \______/  \_______|\__|  \__| \_______|\__|      \__|  \__|\__|   \____/

# Enable strict error handling
set -euo pipefail

# Configuration constants
readonly USER_HOME="/home/${APP_USER}"
readonly USER_BASHRC="${USER_HOME}/.bashrc"
readonly ALIASES_FILE="/tmp/${APP_USER}-workspace-aliases.sh"

# Output formatting functions
log_info() {
    echo "$*"
}

log_success() {
    echo "✓ $*"
}

log_warning() {
    echo "⚠ $*"
}

log_error() {
    echo "✗ $*" >&2
}

# Input validation
validate_environment() {
    if [[ -z "${APP_USER:-}" ]]; then
        log_error "APP_USER environment variable is not set"
        exit 1
    fi
}

validate_user_exists() {
    if ! id "$APP_USER" >/dev/null 2>&1; then
        log_error "User $APP_USER does not exist"
        exit 1
    fi
}

# Function to create aliases file
create_aliases_file() {
    local aliases_file="$1"

    cat > "$aliases_file" << 'EOF'
#!/bin/bash

# Laravel/PHP aliases
alias art="php artisan"
alias fresh="php artisan migrate:fresh"
alias migrate="php artisan migrate"
alias rollback="php artisan migrate:rollback"

# Development tools
alias pint="./vendor/bin/pint"
alias pest="./vendor/bin/pest"
alias phpstan="./vendor/bin/phpstan"
alias phpunit="./vendor/bin/phpunit"

# Composer autocomplete function with composer check
function _composer_complete() {
    # Only enable autocomplete if composer exists and is executable
    if ! command -v composer >/dev/null 2>&1; then
        return 1
    fi

    local commands="install update require require-dev remove show outdated validate status dump-autoload clear-cache config global search depends why-not run-script check-platform-reqs archive audit init create-project self-update bump normalize changelogs"
    COMPREPLY=($(compgen -W "${commands}" -- "${COMP_WORDS[COMP_CWORD]}"))
}

complete -F _composer_complete composer

# Artisan autocomplete function with artisan check
function _artisan() {
    # Only enable autocomplete if artisan exists and is executable
    if [[ ! -f "artisan" || ! -x "artisan" ]]; then
        return 1
    fi

    COMP_WORDBREAKS=${COMP_WORDBREAKS//:}
    local commands
    mapfile -t commands < <(php artisan --raw --no-ansi list | sed "s/[[:space:]].*//g")
    mapfile -t COMPREPLY < <(compgen -W "${commands[*]}" -- "${COMP_WORDS[COMP_CWORD]}")
    return 0
}

complete -F _artisan art
complete -F _artisan artisan
EOF
}

# Function to set file ownership and permissions
setup_file_permissions() {
    local file_path="$1"
    local permissions="$2"

    chown "${APP_USER}:${APP_USER}" "$file_path"
    chmod "$permissions" "$file_path"
}

# Function to add aliases sourcing to bashrc
setup_bashrc_sourcing() {
    local bashrc_file="$1"
    local aliases_file="$2"

    if [[ -f "$bashrc_file" ]]; then
        # Check if aliases are already sourced
        if ! grep -q "$aliases_file" "$bashrc_file"; then
            {
                echo ""
                echo "# Source workspace development aliases"
                echo "[ -f \"$aliases_file\" ] && source \"$aliases_file\""
            } >> "$bashrc_file"

            setup_file_permissions "$bashrc_file" "644"
            log_success "Aliases sourcing added to $bashrc_file"
        else
            log_info "Aliases already configured in $bashrc_file"
        fi
    else
        log_warning "Bashrc file not found at $bashrc_file"
    fi
}

# Main execution
main() {
    log_info "Setting up development aliases for user: ${APP_USER}"

    # Validate environment and user
    validate_environment
    validate_user_exists

    # Create aliases file
    log_info "Creating aliases file at $ALIASES_FILE"
    create_aliases_file "$ALIASES_FILE"
    setup_file_permissions "$ALIASES_FILE" "644"
    log_success "Aliases file created at $ALIASES_FILE"

    # Setup bashrc sourcing
    log_info "Configuring bashrc sourcing for $USER_BASHRC"
    setup_bashrc_sourcing "$USER_BASHRC" "$ALIASES_FILE"

    log_success "Development aliases configured for ${APP_USER}"
}

# Execute main function
main
